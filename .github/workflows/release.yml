name: Auto Release

on:
  push:
    branches: [main]

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      contents: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run format check
        run: npm run format:check

      - name: Security audit
        run: npm audit --audit-level moderate

      - name: Check for vulnerabilities
        run: npm audit --audit-level high --production

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine version bump
        id: version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          if [[ $CURRENT_VERSION =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            MAJOR=${BASH_REMATCH[1]}
            MINOR=${BASH_REMATCH[2]}
            PATCH=${BASH_REMATCH[3]}
          else
            echo "Invalid version format: $CURRENT_VERSION"
            echo "Expected format: X.Y.Z"
            exit 1
          fi

          COMMIT_MESSAGES=$(git log --oneline -10 --pretty=format:"%s")

          # Check for breaking changes (bump major version)
          if echo "$COMMIT_MESSAGES" | grep -qE "^(feat|feature)\(.*\)!:|^(fix|chore)\(.*\)!:|BREAKING CHANGE"; then
            NEW_MAJOR=$((MAJOR + 1))
            NEW_VERSION="${NEW_MAJOR}.0.0"
          # Check for feature commits (bump minor version)
          elif echo "$COMMIT_MESSAGES" | grep -qE "^feat(\(.*\))?:|^feature(\(.*\))?:"; then
            NEW_MINOR=$((MINOR + 1))
            NEW_VERSION="${MAJOR}.${NEW_MINOR}.0"
          # Default: bump patch version
          else
            NEW_PATCH=$((PATCH + 1))
            # If patch reaches 99, bump minor version and reset patch to 0
            if [ $NEW_PATCH -ge 99 ]; then
              NEW_MINOR=$((MINOR + 1))
              NEW_VERSION="${MAJOR}.${NEW_MINOR}.0"
            else
              NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
            fi
          fi

          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update version in package.json
        run: |
          npm version ${{ steps.version.outputs.new_version }} --no-git-tag-version
          git add package.json
          git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}"

      - name: Generate Release Notes
        id: generate_notes
        uses: actions/github-script@v7
        with:
          script: |
            const { data: commits } = await github.rest.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 10
            });

            let latestCommit = null;
            for (const commit of commits) {
              const firstLine = commit.commit.message.split('\n')[0].trim();
              if (!firstLine.toLowerCase().includes('bump version') &&
                  !firstLine.toLowerCase().includes('merge') &&
                  !firstLine.startsWith('Merge ')) {
                latestCommit = commit;
                break;
              }
            }

            let releaseNotes = '';

            if (latestCommit) {
              const firstLine = latestCommit.commit.message.split('\n')[0].trim();
              
              if (firstLine.match(/^feat(\([^)]*\))?:\s*/)) {
                const cleanMessage = firstLine.replace(/^feat(\([^)]*\))?:\s*/, '');
                releaseNotes = '### New Features\n- ' + cleanMessage + '\n\n';
              } else if (firstLine.match(/^fix(\([^)]*\))?:\s*/)) {
                const cleanMessage = firstLine.replace(/^fix(\([^)]*\))?:\s*/, '');
                releaseNotes = '### Bug Fixes\n- ' + cleanMessage + '\n\n';
              } else if (firstLine.match(/^chore(\([^)]*\))?:\s*/)) {
                const cleanMessage = firstLine.replace(/^chore(\([^)]*\))?:\s*/, '');
                releaseNotes = '### Improvements\n- ' + cleanMessage + '\n\n';
              } else if (firstLine.match(/^(docs?|style|refactor|perf|test)(\([^)]*\))?:\s*/)) {
                const cleanMessage = firstLine.replace(/^(docs?|style|refactor|perf|test)(\([^)]*\))?:\s*/, '');
                releaseNotes = '### Improvements\n- ' + cleanMessage + '\n\n';
              } else {
                const lowerMessage = firstLine.toLowerCase();
                if (lowerMessage.includes('feature') || lowerMessage.includes('new ') || 
                    (lowerMessage.startsWith('add ') && !lowerMessage.includes('fix'))) {
                  releaseNotes = '### New Features\n- ' + firstLine + '\n\n';
                } else if (lowerMessage.includes('fix') || lowerMessage.includes('bug') || 
                           lowerMessage.includes('error') || lowerMessage.includes('issue')) {
                  releaseNotes = '### Bug Fixes\n- ' + firstLine + '\n\n';
                } else {
                  releaseNotes = '### Updates\n- ' + firstLine + '\n\n';
                }
              }
            }

            if (!releaseNotes.trim()) {
              releaseNotes = '### Updates\n- Various improvements and updates\n\n';
            }

            console.log('Generated release notes:', releaseNotes);
            core.setOutput('release-notes', releaseNotes);

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          name: Sage CLI v${{ steps.version.outputs.new_version }}
          body: |
            ## Sage CLI v${{ steps.version.outputs.new_version }}

            ### Installation

            **Linux/macOS:**
            ```bash
            bash -c "$(curl -fsSL https://raw.githubusercontent.com/samueldervishii/sage-cli/main/install.sh)"
            ```

            **Windows (PowerShell):**
            ```powershell
            irm https://raw.githubusercontent.com/samueldervishii/sage-cli/main/install.ps1 | iex
            ```

            **Windows (Node.js):**
            ```cmd
            curl -o install.mjs https://raw.githubusercontent.com/samueldervishii/sage-cli/main/install.mjs && node install.mjs
            ```

            ${{ steps.generate_notes.outputs.release-notes }}

            ### Full Changelog
            **Full Changelog**: https://github.com/samueldervishii/sage-cli/commits/v${{ steps.version.outputs.new_version }}
          draft: false
          prerelease: false

      - name: Push changes
        run: |
          git push origin main
