name: Auto Release

on:
  push:
    branches: [main]

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      contents: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run format check
        run: npm run format:check

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine version bump
        id: version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          if [[ $CURRENT_VERSION =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)(-beta)?$ ]]; then
            MAJOR=${BASH_REMATCH[1]}
            MINOR=${BASH_REMATCH[2]}
            PATCH=${BASH_REMATCH[3]}
            IS_BETA=${BASH_REMATCH[4]}
          else
            echo "Invalid version format"
            exit 1
          fi

          NEW_PATCH=$((PATCH + 1))

          if [[ -n "$IS_BETA" ]]; then
            NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}-beta"
          else
            NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
          fi

          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update version in package.json
        run: |
          npm version ${{ steps.version.outputs.new_version }} --no-git-tag-version
          git add package.json
          git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}"

      - name: Generate Release Notes
        id: generate_notes
        uses: actions/github-script@v7
        with:
          script: |
            const { data: commits } = await github.rest.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              since: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(), // Last 7 days
              per_page: 50
            });
            
            const features = [];
            const fixes = [];
            const improvements = [];
            const others = [];
            
            commits.forEach(commit => {
              const message = commit.commit.message.toLowerCase();
              const firstLine = commit.commit.message.split('\n')[0];
              
              if (message.startsWith('feat:') || message.includes('add') || message.includes('implement')) {
                features.push(`- ${firstLine.replace(/^feat:\s*/, '').replace(/^add\s*/, 'Add ').replace(/^implement\s*/, 'Implement ')}`);
              } else if (message.startsWith('fix:') || message.includes('fix') || message.includes('bug')) {
                fixes.push(`- ${firstLine.replace(/^fix:\s*/, '').replace(/^fix\s*/, 'Fix ')}`);
              } else if (message.startsWith('chore:') && !message.includes('bump version')) {
                improvements.push(`- ${firstLine.replace(/^chore:\s*/, '')}`);
              } else if (!message.includes('bump version') && !message.includes('merge')) {
                others.push(`- ${firstLine}`);
              }
            });
            
            let releaseNotes = '';
            
            if (features.length > 0) {
              releaseNotes += '### New Features\n' + features.slice(0, 5).join('\n') + '\n\n';
            }
            
            if (fixes.length > 0) {
              releaseNotes += '### Bug Fixes\n' + fixes.slice(0, 5).join('\n') + '\n\n';
            }
            
            if (improvements.length > 0) {
              releaseNotes += '### Improvements\n' + improvements.slice(0, 3).join('\n') + '\n\n';
            }
            
            if (others.length > 0 && (features.length + fixes.length + improvements.length) < 3) {
              releaseNotes += '### Changes\n' + others.slice(0, 3).join('\n') + '\n\n';
            }
            
            if (!releaseNotes.trim()) {
              releaseNotes = '### Updates\n- Various improvements and updates\n\n';
            }
            
            return releaseNotes;

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          name: Sophia CLI v${{ steps.version.outputs.new_version }}
          body: |
            ## Sophia CLI v${{ steps.version.outputs.new_version }}

            ### Installation
            ```bash
            bash -c "$(curl -fsSL https://raw.githubusercontent.com/samueldervishii/sophia-cli/main/install.sh)"
            ```

            ${{ steps.generate_notes.outputs.result }}

            ### Full Changelog
            **Full Changelog**: https://github.com/samueldervishii/sophia-cli/commits/v${{ steps.version.outputs.new_version }}
          draft: false
          prerelease: ${{ contains(steps.version.outputs.new_version, 'beta') }}

      - name: Push changes
        run: |
          git push origin main
