name: Auto Release

on:
  push:
    branches: [main]

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      contents: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run format check
        run: npm run format:check

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine version bump
        id: version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          if [[ $CURRENT_VERSION =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)(-beta)?$ ]]; then
            MAJOR=${BASH_REMATCH[1]}
            MINOR=${BASH_REMATCH[2]}
            PATCH=${BASH_REMATCH[3]}
            IS_BETA=${BASH_REMATCH[4]}
          else
            echo "Invalid version format"
            exit 1
          fi

          NEW_PATCH=$((PATCH + 1))

          if [[ -n "$IS_BETA" ]]; then
            NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}-beta"
          else
            NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
          fi

          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update version in package.json
        run: |
          npm version ${{ steps.version.outputs.new_version }} --no-git-tag-version
          git add package.json
          git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}"

      - name: Generate Release Notes
        id: generate_notes
        run: |
          # Get commits from last 7 days
          SINCE_DATE=$(date -d '7 days ago' --iso-8601)
          
          # Get commit messages
          COMMITS=$(git log --since="$SINCE_DATE" --pretty=format:"%s" --no-merges)
          
          # Initialize arrays
          FEATURES=""
          FIXES=""
          IMPROVEMENTS=""
          OTHERS=""
          
          # Process each commit
          while IFS= read -r commit; do
            if [[ -n "$commit" ]]; then
              lower_commit=$(echo "$commit" | tr '[:upper:]' '[:lower:]')
              
              if [[ $lower_commit =~ ^feat:|^add\s|^implement\s ]]; then
                clean_msg=$(echo "$commit" | sed 's/^feat: *//i' | sed 's/^add */Add /i' | sed 's/^implement */Implement /i')
                # Capitalize first letter and ensure proper grammar
                clean_msg=$(echo "$clean_msg" | sed 's/\<add ing\>/adding/gi' | sed 's/\<fix ing\>/fixing/gi')
                clean_msg="$(tr '[:lower:]' '[:upper:]' <<< ${clean_msg:0:1})${clean_msg:1}"
                FEATURES="${FEATURES}- ${clean_msg}\n"
              elif [[ $lower_commit =~ ^fix:|^fix\s|bug ]]; then
                clean_msg=$(echo "$commit" | sed 's/^fix: *//i' | sed 's/^fix */Fix /i')
                clean_msg=$(echo "$clean_msg" | sed 's/\<add ing\>/adding/gi' | sed 's/\<fix ing\>/fixing/gi')
                clean_msg="$(tr '[:lower:]' '[:upper:]' <<< ${clean_msg:0:1})${clean_msg:1}"
                FIXES="${FIXES}- ${clean_msg}\n"
              elif [[ $lower_commit =~ ^chore: ]] && [[ ! $lower_commit =~ "bump version" ]]; then
                clean_msg=$(echo "$commit" | sed 's/^chore: *//i')
                clean_msg=$(echo "$clean_msg" | sed 's/\<add ing\>/adding/gi' | sed 's/\<fix ing\>/fixing/gi')
                clean_msg="$(tr '[:lower:]' '[:upper:]' <<< ${clean_msg:0:1})${clean_msg:1}"
                IMPROVEMENTS="${IMPROVEMENTS}- ${clean_msg}\n"
              elif [[ ! $lower_commit =~ "bump version" ]] && [[ ! $lower_commit =~ "merge" ]]; then
                clean_msg=$(echo "$commit" | sed 's/\<add ing\>/adding/gi' | sed 's/\<fix ing\>/fixing/gi')
                clean_msg="$(tr '[:lower:]' '[:upper:]' <<< ${clean_msg:0:1})${clean_msg:1}"
                OTHERS="${OTHERS}- ${clean_msg}\n"
              fi
            fi
          done <<< "$COMMITS"
          
          # Build release notes
          RELEASE_NOTES=""
          
          if [[ -n "$FEATURES" ]]; then
            RELEASE_NOTES="${RELEASE_NOTES}### New Features\n${FEATURES}\n"
          fi
          
          if [[ -n "$FIXES" ]]; then
            RELEASE_NOTES="${RELEASE_NOTES}### Bug Fixes\n${FIXES}\n"
          fi
          
          if [[ -n "$IMPROVEMENTS" ]]; then
            RELEASE_NOTES="${RELEASE_NOTES}### Improvements\n${IMPROVEMENTS}\n"
          fi
          
          # Add others only if we don't have enough content
          feature_count=$(echo -e "$FEATURES" | grep -c "^-" || true)
          fix_count=$(echo -e "$FIXES" | grep -c "^-" || true)
          improvement_count=$(echo -e "$IMPROVEMENTS" | grep -c "^-" || true)
          total=$((feature_count + fix_count + improvement_count))
          
          if [[ -n "$OTHERS" ]] && [[ $total -lt 3 ]]; then
            RELEASE_NOTES="${RELEASE_NOTES}### Changes\n${OTHERS}\n"
          fi
          
          # Default if empty
          if [[ -z "$RELEASE_NOTES" ]]; then
            RELEASE_NOTES="### Updates\n- Various improvements and updates\n\n"
          fi
          
          # Save to file for multiline output
          echo -e "$RELEASE_NOTES" > release_notes.txt
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          cat release_notes.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          name: Sophia CLI v${{ steps.version.outputs.new_version }}
          body: |
            ## Sophia CLI v${{ steps.version.outputs.new_version }}

            ### Installation
            ```bash
            bash -c "$(curl -fsSL https://raw.githubusercontent.com/samueldervishii/sophia-cli/main/install.sh)"
            ```

            ${{ env.RELEASE_NOTES }}

            ### Full Changelog
            **Full Changelog**: https://github.com/samueldervishii/sophia-cli/commits/v${{ steps.version.outputs.new_version }}
          draft: false
          prerelease: ${{ contains(steps.version.outputs.new_version, 'beta') }}

      - name: Push changes
        run: |
          git push origin main
