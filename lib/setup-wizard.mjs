import fs from "fs";
import path from "path";
import inquirer from "inquirer";
import chalk from "chalk";
import { fileURLToPath } from "url";
import { dirname } from "path";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

class SetupWizard {
  constructor() {
    this.envPath = path.join(__dirname, "..", ".env");
    this.userEnvPath = path.join(
      process.env.HOME,
      ".local",
      "bin",
      "sophia-cli",
      ".env"
    );
  }

  async checkEnvFile() {
    const localExists = fs.existsSync(this.envPath);
    const userExists = fs.existsSync(this.userEnvPath);

    if (localExists || userExists) {
      const envContent = fs.readFileSync(
        localExists ? this.envPath : this.userEnvPath,
        "utf8"
      );
      const hasGeminiKey =
        envContent.includes("GEMINI_API_KEY") &&
        envContent.match(/GEMINI_API_KEY\s*=\s*[^#\n\r]+/);
      const hasSerperKey =
        envContent.includes("SERPER_API_KEY") &&
        envContent.match(/SERPER_API_KEY\s*=\s*[^#\n\r]+/);

      return { exists: true, hasGeminiKey, hasSerperKey };
    }

    return { exists: false, hasGeminiKey: false, hasSerperKey: false };
  }

  async showWelcome() {
    console.log(chalk.cyan("\nSophia CLI Setup Wizard\n"));
    console.log(
      chalk.gray(
        "This wizard will help you configure API keys for enhanced features.\n"
      )
    );
  }

  async promptForKeys(existing = {}) {
    const questions = [];

    if (!existing.hasGeminiKey) {
      questions.push({
        type: "password",
        name: "geminiKey",
        message: "Enter your Google Gemini API key (required for AI features):",
        mask: "*",
        validate: input => {
          if (!input.trim()) {
            return "Gemini API key is required for basic functionality";
          }
          return true;
        },
      });
    }

    if (!existing.hasSerperKey) {
      questions.push({
        type: "confirm",
        name: "wantSerper",
        message: "Do you want to add Serper API key for web search? (optional)",
        default: false,
      });

      questions.push({
        type: "password",
        name: "serperKey",
        message: "Enter your Serper API key (get free key from serper.dev):",
        mask: "*",
        when: answers => answers.wantSerper,
        validate: input => {
          if (!input.trim()) {
            return 'Please enter a valid Serper API key or choose "no" above';
          }
          return true;
        },
      });
    }

    if (questions.length === 0) {
      return null; // No keys needed
    }

    return await inquirer.prompt(questions);
  }

  async createEnvFile(keys) {
    const envContent = [];

    envContent.push("# Sophia CLI Configuration");
    envContent.push("# Generated by setup wizard");
    envContent.push("");

    if (keys.geminiKey) {
      envContent.push("# Google Gemini API Key (required)");
      envContent.push(
        "# Get your free key from: https://makersuite.google.com/app/apikey"
      );
      envContent.push(`GEMINI_API_KEY=${keys.geminiKey}`);
      envContent.push("");
    }

    if (keys.serperKey) {
      envContent.push("# Serper API Key (optional - for web search)");
      envContent.push("# Get your free key from: https://serper.dev/api-key");
      envContent.push(`SERPER_API_KEY=${keys.serperKey}`);
      envContent.push("");
    }

    envContent.push("# Optional: Customize default settings");
    envContent.push("# DEFAULT_PORT=3000");
    envContent.push("# OPEN_BROWSER=true");

    const content = envContent.join("\n");

    const envDir = path.dirname(this.userEnvPath);
    if (!fs.existsSync(envDir)) {
      fs.mkdirSync(envDir, { recursive: true });
    }

    fs.writeFileSync(this.userEnvPath, content);

    return this.userEnvPath;
  }

  async showInstructions() {
    console.log(chalk.green("\nSetup complete!\n"));

    console.log(chalk.cyan("Get your API keys:"));
    console.log(
      chalk.gray("  • Gemini API: https://makersuite.google.com/app/apikey")
    );
    console.log(
      chalk.gray("  • Serper API: https://serper.dev/api-key (optional)\n")
    );

    console.log(chalk.cyan("Next steps:"));
    console.log(chalk.gray('  • Run "sophia" to start using Sophia CLI'));
    console.log(chalk.gray('  • Try "sophia chat" for conversational mode'));
    console.log(chalk.gray('  • Use "sophia files" for file exploration\n'));

    console.log(chalk.yellow("Note: Your .env file is located at:"));
    console.log(chalk.gray(`     ${this.userEnvPath}\n`));
  }

  async run() {
    try {
      await this.showWelcome();

      const envStatus = await this.checkEnvFile();

      if (
        envStatus.exists &&
        envStatus.hasGeminiKey &&
        envStatus.hasSerperKey
      ) {
        console.log(chalk.green("Configuration already complete!"));
        console.log(chalk.gray('Run "sophia" to start using the CLI.\n'));
        return;
      }

      if (
        envStatus.exists &&
        envStatus.hasGeminiKey &&
        !envStatus.hasSerperKey
      ) {
        const addSerper = await inquirer.prompt([
          {
            type: "confirm",
            name: "addSerper",
            message: "Gemini API key found. Add Serper API key for web search?",
            default: false,
          },
        ]);

        if (!addSerper.addSerper) {
          console.log(chalk.green("You're all set!"));
          return;
        }
      }

      const answers = await this.promptForKeys(envStatus);

      if (answers) {
        const envPath = await this.createEnvFile(answers);
        console.log(chalk.green(`Configuration saved to: ${envPath}`));
      }

      await this.showInstructions();
    } catch (error) {
      console.error(chalk.red("\nSetup failed:"), error.message);
      process.exit(1);
    }
  }

  async quickSetup() {
    const envStatus = await this.checkEnvFile();

    if (!envStatus.hasGeminiKey) {
      console.log(chalk.yellow("\nGemini API key not found!"));
      console.log(chalk.gray("Sophia CLI needs this key to function.\n"));

      const runSetup = await inquirer.prompt([
        {
          type: "confirm",
          name: "runSetup",
          message: "Would you like to run the setup wizard now?",
          default: true,
        },
      ]);

      if (runSetup.runSetup) {
        await this.run();
        return true;
      } else {
        console.log(
          chalk.yellow('\nRun "sophia setup" anytime to configure API keys.\n')
        );
        return false;
      }
    }

    return true; // Keys are present
  }
}

export default SetupWizard;
